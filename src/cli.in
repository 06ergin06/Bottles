#!@PYTHON@

# cli.in
#
# Copyright 2020 brombinmirko <send@mirko.pm>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import gi
import os
import sys
import json
import signal
import argparse
import warnings

warnings.filterwarnings("ignore")  # suppress GTK warnings
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio

VERSION = "@VERSION@"
pkgdatadir = "@pkgdatadir@"
# noinspection DuplicatedCode
gresource_path = f"{pkgdatadir}/bottles.gresource"
sys.path.insert(1, pkgdatadir)

signal.signal(signal.SIGINT, signal.SIG_DFL)

from bottles.params import *  # pyright: reportMissingImports=false
from bottles.backend.managers.manager import Manager
from bottles.utils import UtilsConnection


# noinspection DuplicatedCode
class CLI:
    default_settings = Gtk.Settings.get_default()
    utils_conn = UtilsConnection()
    settings = Gio.Settings.new(APP_ID)

    def __init__(self):
        # self.__clear()

        self.parser = argparse.ArgumentParser(description="Bottles is a tool to manage your bottles")
        self.parser.add_argument("-v", "--version", action="version", version=f"Bottles {VERSION}")
        self.parser.add_argument("-j", "--json", action="store_true", help="Outputs in JSON format")

        subparsers = self.parser.add_subparsers(dest='command', help='sub-command help')

        list_parser = subparsers.add_parser("list", help="List entities")
        list_parser.add_argument('type', choices=['bottles', 'components'], help="Type of entity")
        list_parser.add_argument("-f", "--filter", help="Filter bottles and components (e.g. '-f 'environment:gaming')")

        programs_parser = subparsers.add_parser("programs", help="List programs")
        programs_parser.add_argument("-b", "--bottle", help="Bottle name", required=True)

        self.__process_args()

    @staticmethod
    def __clear():
        os.system("clear")

    def __process_args(self):
        self.args = self.parser.parse_args()

        # LIST parser
        if self.args.command == "list":
            _filter = None if self.args.filter is None else self.args.filter
            _type = self.args.type

            if _type == "bottles":
                self.list_bottles(c_filter=_filter)
            elif _type == "components":
                self.list_components(c_filter=_filter)

        # PROGRAMS parser
        elif self.args.command == "programs":
            _bottle = self.args.bottle
            self.list_programs(_bottle)

    # region LIST
    def list_bottles(self, c_filter=None):
        mng = Manager(self, is_cli=True)
        mng.check_bottles()
        bottles = mng.local_bottles

        if c_filter and c_filter.startswith("environment:"):
            environment = c_filter.split(":")[1].lower()
            bottles = [b[0] for b in bottles.items() if b[1].get("Environment", "Custom").lower() == environment]

        if self.args.json:
            sys.stdout.write(json.dumps(bottles))
            exit(0)

        if len(bottles) > 0:
            sys.stdout.write(f"Found {len(bottles)} bottles:\n")
            for b in bottles:
                sys.stdout.write(f"- {b}\n")

    def list_components(self, c_filter=None):
        mng = Manager(self, is_cli=True)
        mng.check_runners(False)
        mng.check_dxvk(False)
        mng.check_vkd3d(False)
        mng.check_nvapi(False)
        mng.check_latencyflex(False)

        components = {
            "runners": mng.runners_available,
            "dxvk": mng.dxvk_available,
            "vkd3d": mng.vkd3d_available,
            "nvapi": mng.nvapi_available,
            "latencyflex": mng.latencyflex_available
        }

        if c_filter and c_filter.startswith("category:"):
            category = c_filter.split(":")[1].lower()
            if category in components:
                components = {category: components[category]}

        if self.args.json:
            sys.stdout.write(json.dumps(components))
            exit(0)

        for c in components:
            sys.stdout.write(f"Found {len(components[c])} {c}\n")
            for i in components[c]:
                sys.stdout.write(f"- {i}\n")

    # endregion

    # region PROGRAMS
    def list_programs(self, _bottle):
        mng = Manager(self, is_cli=True)
        mng.check_bottles()

        if _bottle not in mng.local_bottles:
            sys.stderr.write(f"Bottle {_bottle} not found\n")
            exit(1)

        bottle = mng.local_bottles[_bottle]
        programs = mng.get_programs(bottle)
        programs = [p for p in programs if not p.get("removed", False)]

        if self.args.json:
            sys.stdout.write(json.dumps(programs))
            exit(0)

        if len(programs) > 0:
            sys.stdout.write(f"Found {len(programs)} programs:\n")
            for p in programs:
                sys.stdout.write(f"- {p['name']}\n")
    # endregion


if __name__ == '__main__':
    cli = CLI()
